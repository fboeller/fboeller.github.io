[
  {
    "type": "Project",
    "icon": "github.svg",
    "alt": "GitHub",
    "title": "Jyfti",
    "links": [
      {
        "text": "View docs",
        "url": "https://jyfti.github.io/jyfti/"
      },
      {
        "text": "View sources",
        "url": "https://github.com/jyfti/jyfti"
      }
    ],
    "tools": ["Node.js", "Typescript", "RxJS"],
    "excerpt": "The workflow engine for software engineers"
  },
  {
    "type": "Blog post",
    "icon": "medium.svg",
    "alt": "Medium",
    "title": "Pattern Matching vs. Polymorphism",
    "links": [
      {
        "text": "Open article",
        "url": "https://medium.com/better-programming/pattern-matching-vs-polymorphism-ce0441fbfcda"
      }
    ],
    "tools": ["Java", "Kotlin"],
    "excerpt": "Subtype polymorphism is great for adding more entity types. Pattern matching is a better choice for adding more functionality. In this article, we explore both approaches."
  },
  {
    "type": "Project",
    "icon": "github.svg",
    "alt": "GitHub",
    "title": "ngx-elements-router",
    "links": [
      {
        "text": "View sources",
        "url": "https://github.com/fboeller/ngx-elements-router"
      }
    ],
    "tools": ["Angular", "Typescript"],
    "excerpt": "An Angular module to enable the usage of the router module within Angular projects defining custom elements."
  },
  {
    "type": "Meetup Talk",
    "icon": "meetup.png",
    "alt": "Meetup",
    "title": "Component Testing in Java",
    "links": [
      {
        "text": "View sources",
        "url": "https://github.com/fboeller/component-testing-example-java"
      },
      {
        "text": "View event",
        "url": "https://www.meetup.com/Bonn-Code/events/268598662/"
      }
    ],
    "tools": ["Java", "Testcontainers"],
    "excerpt": "The ability to test a micro service in isolation is an integral part of a fast release cycle. In this talk, I shared how we set up isolated test cases for a real world microservice."
  },
  {
    "type": "Project",
    "icon": "github.svg",
    "alt": "GitHub",
    "title": "fboeller.github.io",
    "links": [
      {
        "text": "View sources",
        "url": "https://github.com/fboeller/fboeller.github.io"
      }
    ],
    "tools": ["Vue.js", "Tailwind"],
    "excerpt": "My personal resume that you are currently viewing."
  },
  {
    "type": "Talk",
    "icon": "github.svg",
    "alt": "GitHub",
    "title": "Functional Idioms with Java",
    "links": [
      {
        "text": "View sources",
        "url": "https://github.com/fboeller/functional-idioms-with-java"
      },
      {
        "text": "View slides",
        "url": "https://github.com/fboeller/functional-idioms-with-java/blob/master/presentation.pdf"
      }
    ],
    "tools": ["Java"],
    "excerpt": "With requirements on throughput and scalability, object-oriented programs become difficult to maintain. Functional programming idioms aim to address this problem."
  },
  {
    "type": "Stack Overflow Answer",
    "icon": "stack-overflow.svg",
    "alt": "Stack Overflow",
    "title": "Using Java 8 to convert a list into a string",
    "links": [
      {
        "text": "View answer",
        "url": "https://stackoverflow.com/questions/24882927/using-java-8-to-convert-a-list-of-objects-into-a-string-obtained-from-the-tostri/24884212#24884212"
      }
    ],
    "tools": ["Java"],
    "excerpt": "Is there a way to build a string that concatenates the output of calls to the toString() method from the instances of a list in a single line?"
  },
  {
    "type": "Blog post",
    "icon": "medium.svg",
    "alt": "Medium",
    "title": "Avoid Runtime Errors with Optionals",
    "links": [
      {
        "text": "Open article",
        "url": "https://medium.com/@fabianboeller/avoid-runtime-errors-with-optionals-f1d6b690dcf5"
      }
    ],
    "tools": ["Java"],
    "excerpt": "Null is bad for representing the absence of a value, use Optionals instead. Use Optional.flatMap to chain multiple operations that might not return a value."
  },
  {
    "type": "Blog post",
    "icon": "leanix.jpeg",
    "alt": "LeanIX Blog",
    "title": "Why TypeScript is awesome with SQL",
    "links": [
      {
        "text": "Open article",
        "url": "https://engineering.leanix.net/blog/typescript-sql-queries/"
      }
    ],
    "tools": ["Typescript", "Knex"],
    "excerpt": "Node.js with Typescript and SQL databases are a great combination. Typescript's type system captures query results precisely, working well with Knex' query builder."
  }
]
